{"version":3,"sources":["components/Navbar.js","components/Person.js","components/People.js","components/Planet.js","components/Planets.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Person","person","className","name","gender","birth_year","fetchPeople","a","fetch","res","json","People","useQuery","data","status","console","log","results","map","key","Planet","planet","population","terrain","fetchPlanets","greeting","page","Planets","useState","staleTime","onSuccess","App","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAWeA,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACC,6BACG,4BAAQC,QAAS,kBAAMD,EAAQ,aAA/B,WACA,4BAAQC,QAAS,kBAAMD,EAAQ,YAA/B,Y,8BCMUE,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKC,UAAU,QACb,4BAAMD,EAAOE,MACb,uCAAcF,EAAOG,QACrB,2CAAkBH,EAAOI,cCHzBC,EAAW,uCAAG,4BAAAC,EAAA,sEACAC,MAAM,gCADN,cACZC,EADY,yBAEXA,EAAIC,QAFO,2CAAH,qDA+BFC,EA1BA,WAAO,IAAD,EACMC,YAAS,SAAUN,GAApCO,EADW,EACXA,KAAMC,EADK,EACLA,OAGd,OAFAC,QAAQC,IAAIH,GAGV,6BACE,sCAGY,YAAXC,GACC,6CAGU,UAAXA,GACC,oDAGU,YAAXA,GACC,6BACID,EAAKI,QAAQC,KAAI,SAAAjB,GAAM,OAAI,kBAAC,EAAD,CAAQkB,IAAKlB,EAAOE,KAAMF,OAAQA,UChB1DmB,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKnB,UAAU,QACb,4BAAMmB,EAAOlB,MACb,2CAAkBkB,EAAOC,YACzB,wCAAeD,EAAOE,WCHtBC,EAAY,uCAAG,WAAOL,EAAKM,EAAUC,GAAtB,eAAAnB,EAAA,6DACnBQ,QAAQC,IAAIS,GADO,SAEDjB,MAAM,uCAAD,OAAwCkB,IAF5C,cAEbjB,EAFa,yBAGZA,EAAIC,QAHQ,2CAAH,0DAwCHiB,EAlCC,WAAO,IAAD,EACMC,mBAAS,GADf,mBACZF,EADY,KACN5B,EADM,OAEKc,YAAS,CAAC,UAAU,QAAQc,GAAOF,EAAc,CACxEK,UAAW,EAEXC,UAAW,kBAAMf,QAAQC,IAAI,gCAHvBH,EAFY,EAEZA,KAAMC,EAFM,EAENA,OAOd,OAFAC,QAAQC,IAAIH,GAGV,6BACE,uCAEA,4BAAQd,QAAS,kBAAMD,EAAQ,KAA/B,UACA,4BAAQC,QAAS,kBAAMD,EAAQ,KAA/B,UACA,4BAAQC,QAAS,kBAAMD,EAAQ,KAA/B,UAEY,YAAXgB,GACC,gDAGU,UAAXA,GACC,oDAGU,YAAXA,GACC,6BACID,EAAKI,QAAQC,KAAI,SAAAG,GAAM,OAAI,kBAAC,EAAD,CAAQF,IAAKE,EAAOlB,KAAMkB,OAAQA,U,OCb1DU,MAlBf,WAAgB,IAAD,EACWH,mBAAS,WADpB,mBACLF,EADK,KACA5B,EADA,KAIb,OACE,oCACE,yBAAKI,UAAU,OACb,8CACE,kBAAC,EAAD,CAAQJ,QAASA,IACnB,yBAAKI,UAAU,WACA,YAATwB,EAAqB,kBAAC,EAAD,MAAc,kBAAC,EAAD,QAG3C,kBAAC,qBAAD,CAAoBM,eAAe,MCdzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.d26147ec.chunk.js","sourcesContent":["import React from 'react'\n\nconst Navbar = ({ setPage }) => {\n\treturn (\n\t\t<nav>\n\t\t   <button onClick={() => setPage('planets')}>Planets</button>\n\t\t   <button onClick={() => setPage('people')}>People</button>\n\t    </nav>\n\t)\n}\n\nexport default Navbar","import React from 'react';\n\nconst Person = ({ person }) => {\n  return (\n    <div className=\"card\">\n      <h3>{ person.name }</h3>\n      <p>Gender - { person.gender }</p>\n      <p>Birth year - { person.birth_year }</p>\n    </div>\n  );\n}\n \nexport default Person","import React from 'react';\nimport { useQuery } from 'react-query';\nimport Person from './Person';\n\nconst fetchPeople = async () => {\n  const res = await fetch('http://swapi.dev/api/people/');\n  return res.json();\n}\n\nconst People = () => {\n  const { data, status } = useQuery('people', fetchPeople);\n  console.log(data);\n\n  return (\n    <div>\n      <h2>People</h2>\n      {/* { status } */}\n\n      {status === 'loading' && (\n        <div>Loading data</div>\n      )}\n\n      {status === 'error' && (\n        <div>Error fetching data</div>\n      )}\n\n      {status === 'success' && (\n        <div>\n          { data.results.map(person => <Person key={person.name} person={person} /> ) }\n        </div>\n      )} \n    </div>\n  );\n}\n \nexport default People;","import React from 'react';\n\nconst Planet = ({ planet }) => {\n  return (\n    <div className=\"card\">\n      <h3>{ planet.name }</h3>\n      <p>Population - { planet.population }</p>\n      <p>Terrain - { planet.terrain }</p>\n    </div>\n  );\n}\n \nexport default Planet;","import React, { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport Planet from './Planet';\n\nconst fetchPlanets = async (key, greeting, page) => {\n  console.log(greeting)\n  const res = await fetch(`https://swapi.dev/api/planets/?page=${page}`);\n  return res.json();\n}\n\nconst Planets = () => {\n  const [ page, setPage ] = useState(1)\n  const { data, status } = useQuery(['planets','hello',page], fetchPlanets, {\n    staleTime: 0, \n    // cacheTime: 10,\n    onSuccess: () => console.log('data fetched successfully')\n  });\n  console.log(data);\n\n  return (\n    <div>\n      <h2>Planets</h2>\n\n      <button onClick={() => setPage(1)}>page 1</button>\n      <button onClick={() => setPage(2)}>page 2</button>\n      <button onClick={() => setPage(3)}>page 3</button>\n\n      {status === 'loading' && (\n        <div>Loading data...</div>\n      )}\n\n      {status === 'error' && (\n        <div>Error fetching data</div>\n      )}\n\n      {status === 'success' && (\n        <div>\n          { data.results.map(planet => <Planet key={planet.name} planet={planet} /> ) }\n        </div>\n      )} \n    </div>\n  );\n}\n \nexport default Planets;","import React, {useState} from 'react';\nimport Navbar from './components/Navbar'\nimport People from './components/People'\nimport Planets from './components/Planets'\nimport { ReactQueryDevtools } from 'react-query-devtools' \n\nfunction App() {\n   const [page,setPage] = useState('planets')\n\n\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Star Wars Info</h1>\n          <Navbar setPage={setPage} />\n        <div className=\"content\">\n            { page === 'planets' ? <Planets /> : <People /> }\n        </div>\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}